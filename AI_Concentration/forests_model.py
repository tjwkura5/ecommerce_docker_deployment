# -*- coding: utf-8 -*-
"""forests_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j7mTQclkh4yx7sBIjsICCxNbo0hw7OLN
"""

import pandas as pd
import numpy as np
from sklearn.ensemble import IsolationForest
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Preprocessing
# Drop unnecessary columns and only keep numerical or encoded categorical features
data = data.drop(['id', 'card_id', 'customer_id', 'email', 'address_city', 'address_country', 'name_on_card'], axis=1)

# Convert categorical features to numerical using Label Encoding
label_encoder = LabelEncoder()
for column in ['address_state']:
    data[column] = label_encoder.fit_transform(data[column])

# Create a 'potential_fraud' column and initialize it to 0
data['potential_fraud'] = 0

# Flag rows with NaN values as potential fraud
data.loc[data.isnull().any(axis=1), 'potential_fraud'] = 1

# Remove rows with NaN values
data = data.dropna()

# Normalize the data
scaler = StandardScaler()
data_scaled = scaler.fit_transform(data)

# Build and Train the Isolation Forest
iso_forest = IsolationForest(contamination=0.05, random_state=42)  # 5% contamination rate
iso_forest.fit(data_scaled)

# Predict anomalies
anomaly_labels = iso_forest.predict(data_scaled)
data['anomaly'] = anomaly_labels

# Combine potential fraud and anomaly flags
data['fraud'] = data['potential_fraud'] | (data['anomaly'] == -1)  # Using bitwise OR

# Identify fraudulent transactions
fraudulent_transactions = data[data['fraud'] == 1]

print("Number of fraudulent transactions detected:", len(fraudulent_transactions))
fraudulent_transactions

# Feature Engineering
data['email_domain'] = data['email'].apply(lambda x: x.split('@')[-1])
data['card_user_count'] = data.groupby('card_number')['user_id'].transform('count')
data['customer_id_count'] = data.groupby('customer_id')['user_id'].transform('count')

# Label Encoding for categorical variables
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
data['address_country'] = label_encoder.fit_transform(data['address_country'])
data['address_state'] = label_encoder.fit_transform(data['address_state'])
data['email_domain'] = label_encoder.fit_transform(data['email_domain'])

#FIRST ML MODEL
from sklearn.ensemble import IsolationForest

# Define features for anomaly detection
features = ['card_user_count', 'customer_id_count', 'address_country', 'address_state', 'exp_month', 'exp_year']
X = data[features]

# Train Isolation Forest model
iso_forest = IsolationForest(contamination=0.05, random_state=42)  # Adjust contamination to set expected outlier ratio
data['is_fraud'] = iso_forest.fit_predict(X)

# Interpret results: -1 indicates anomaly (potential fraud), 1 indicates normal
data['is_fraud'] = data['is_fraud'].apply(lambda x: 1 if x == -1 else 0)

# View potential fraud cases
fraud_cases = data[data['is_fraud'] == 1]
print(fraud_cases)

anomalies = data[data['reconstruction_error'] > threshold]
anomalies